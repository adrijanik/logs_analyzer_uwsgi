#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Usage: logs_analyzer [--from <date_from>] [--to <date_to>] <logfile>

Arguments:

        logfile  log file to analyze

        Options:

                --from date from

                --to date to
"""

docopt_ = 1
try:
    from docopt import docopt
except ImportError:
    print("Please install docopt it is awesome")
    docopt_ = 0
    help_ = """
Usage: logs_analyzer [--from <date_from>] [--to <date_to>] <logfile>

Arguments:

        logfile  log file to analyze

        Options:

                --from date from

                --to date to
"""


import sys
import re
from datetime import datetime
import getopt

#Celem zadania jest napisanie skryptu parsującego logi serwera uWSGI.
#
#Skrypt powinien posiadać następujące cechy:
#Aplikacja konsolowa
#Aplikacja używająca pythona 3.5 bez zewnętrznych zależności
#Aplikacja na wejściu dostaje nazwę pliku zawierającego poprawny output serwera uWSGI  (co za tym idzie,
#aplikacja nie powinna przerwać swojego działania z nieobsłużonym błędem).
#Skrypt powinien umożliwić wypisanie statystyk dla danego przedziału czasowego (lub wszystkich):
#Ilość zapytań
#Średnia ilość zapytań na sekundę
#Ilość poszczególnych kodów odpowiedzi serwera (200: 10, 301: 20, 500: 56 etc.)
#Średnia wielkość wygenerowanej odpowiedzi (dla zapytań z kodem 2xx)
#
#Przykładowe wywołanie:
#python parser.py --from 20-11-2016_11-23-11 --to 21-11-2016_01-33 logfile.log
#python parser.py --from 20-11-2016_11-23-11 logfile.log
#python parser.py --to 21-11-2016_01-33 logfile.log
#python parser.py logfile.log
#
#Przykładowe wyjście:
#Zapytan: 5361
#Zapytania/sec: 3.5
#Odpowiedzi (200: 10, 301: 20, 500: 56)
#Sredni rozmiar zapytan z kodem 2xx: 4.32 Mb

class Analysis():
    def __init__(self, file_name):
        self.file_name =  file_name
        self.pattern = self.create_pattern()

    def create_pattern(self):
        date = '(?P<date>\S{2,5}\s(?P<month>\S{2,5})\s(?P<day>[1-3]\d)\s(?P<time>\d\d\:\d\d\:\d\d)\s(?P<year>\d{4}))'
        request = '(?P<request>\S{3,7})'
        size = '(?P<size>\d*)'
        duration = '(?P<duration>\d*)'
        code = '(?P<code>\d{3})'
        pattern = '^\[pid\:\s\d{5}\|app\:\s\d\|req\:\s\d\d\/\d\d\]\s\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s\(\)\s\{.*\}\s\[{0}\]\s{1}\s(?:.*?)\s\=\>\sgenerated\s{2}\s\w*\sin\s{3}\s\w*\s\(HTTP\/1\.1\s{4}\).*$'.format(date, request, size, code)
        regex = re.compile(pattern)
        return regex

def validate_arguments(arguments):
    pass
    # check if dates are correct and file exists

def main(argv):
    print(arguments)
    pattern = '^\[pid\:\s\d{5}\|app\:\s\d\|req\:\s\d\d\/\d\d\]\s\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s\(\)\s\{.*\}\s\[(?P<date>\S{2,5}\s(?P<month>\S{2,5})\s(?P<day>[1-3]\d)\s(?P<time>\d\d\:\d\d\:\d\d)\s(?P<year>\d{4}))\]\s(?P<request>\S{3,7})\s(?:.*?)\s\=\>\sgenerated\s(?P<size>\d*)\s\w*\sin\s(?P<duration>\d*)\s\w*\s\(HTTP\/1\.1\s(?P<code>\d{3})\).*$'
    regex = re.compile(pattern)
    requests = ['GET','POST','OPTIONS','PUT','HEAD','DELETE','TRACE','CONNECT']
    info = [100, 101, 110, 111]
    ok = list(range(200,207))
    redirect = list(range(300, 311))
    error_client = list(range(400, 419)) + [451]
    error_server = list(range(500, 512))
    http_codes =  info + ok + error_client + redirect + error_server
    codes_cnt = {key: 0 for key in http_codes}
    requests_cnt = {key: 0 for key in requests}
    cnt = 0
    start = ""
    end = ""
    if arguments["--from"] == "":
        start = "first"
    from_date = ""
    if arguments["--to"] == "":
        end = "last"
    to_date = ""
    if_continue = False
    running_avg = 0
    ok_cnt = 0
    tmp_date = ""
    length = 0
    i = 0
    with open(arguments['<logfile>']) as f:
        lines = f.readlines()
        length = len(lines)
        for i,line in enumerate(lines):
            match = re.search(regex,line)
            if match:
                from_date = match.group('date')
#                from_date="Mon Nov 21 17:50:28 2016"
                conv=datetime.strptime(from_date,"%a %b %d %H:%M:%S %Y")
                date = conv.strftime("%d_%m_%Y_%H_%M_%S")
                tmp_date = date
                if start == "first":
                    arguments['--from'] = date
                    start = ""
                if date == arguments['--from']:
                    from_date = date
                    if_continue = True
                elif date == arguments['--to']:
                    to_date = date
                    if_continue = False
                    codes_cnt[int(match.group('code'))] += 1
                    if match.group('code').startswith('2'):
                        ok_cnt += 1
                        running_avg +=  (float(match.group('size')) - running_avg)/ok_cnt
                        #print("Size: {0}".format(running_avg))
                    requests_cnt[match.group('request')] += 1
                    cnt += 1
                    break
                elif if_continue:
                    codes_cnt[int(match.group('code'))] += 1
                    if match.group('code').startswith('2'):
                        ok_cnt += 1
                        running_avg +=  (float(match.group('size')) - running_avg)/ok_cnt
                        #print("Size: {0}".format(running_avg))

                    requests_cnt[match.group('request')] += 1
                    cnt += 1
                else:
                    continue
        if i == length-1:
           arguments["--to"] = tmp_date
    analysis_duration = datetime.strptime(arguments['--to'], "%d_%m_%Y_%H_%M_%S") - datetime.strptime(arguments['--from'], "%d_%m_%Y_%H_%M_%S")
    print("All requests: {0}".format(cnt))
    for key in requests_cnt:
        print("{0}: {1}".format(key, requests_cnt[key]))
    print("Requests/second: {0}".format(cnt/analysis_duration.total_seconds()))
    print("Answers:")
    codes = ["{0}:{1}".format(key, codes_cnt[key]) for key in codes_cnt]
    print(", ".join(codes))
    print("Average size of ok answer: {0}".format(running_avg))

def convert_args(argv):
    arguments = {"--to":"","--from":"","<logfile>":""}
    try:
        opts, args = getopt.getopt(argv, "ht:f:",["help","to=","from="])
        print(opts)
        print(args)
        for opt, arg in opts:
            if opt in ("-h", "--help"):
                print(help_)
            if opt in ("-t","--to"):
                arguments["--to"]=arg
            if opt in ("-f","--from"):
                arguments["--from"]=arg
        if args:
            arguments["<logfile>"]=args[0]
    except getopt.GetoptError:
        print("Option not recognized.")
        print(help_)
    return arguments

if __name__ == "__main__":
    if docopt_:
        arguments = docopt(__doc__, version='Logs analyzer 0.5')
        main(arguments)
    else:
        print("No docopt exit")
        print(help_)
        arguments = convert_args(sys.argv[1:])
        main(arguments)
